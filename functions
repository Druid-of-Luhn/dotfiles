# Colour man pages
man() {
    env\
        LESS_TERMCAP_md=$(printf $LIGHT_YELLOW) \
        LESS_TERMCAP_me=$(printf $END) \
        LESS_TERMCAP_so=$(printf $CYAN) \
        LESS_TERMCAP_se=$(printf $END) \
        LESS_TERMCAP_us=$(printf $CYAN) \
        LESS_TERMCAP_ue=$(printf $END) \
        man "$@"
}

scm() {
    prefix="rlwrap"
    arguments=""
    case "$1" in
        'r' | 'run' | 'exec')
            shift;
            prefix=""
            arguments="-rmain $@";
            ;;
        'l' | 'load')
            shift;
            arguments="-l $@";
            ;;
        'repl' | 'loop')
            ;;
        *)
            echo 'Usage: scm <run|repl|load> [filename]';
            return;
            ;;
    esac
    $prefix chibi-scheme -m'scheme small' $arguments
}

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isnât a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${blue}${s}";
	else
		return;
	fi;
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}
